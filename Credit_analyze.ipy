# ---- Install (safe) ----
import sys, subprocess
def install(pkg):
    subprocess.check_call([sys.executable, "-m", "pip", "install", pkg, "--quiet"])
for pkg in ["pandas", "numpy", "scikit-learn"]:
    try:
        __import__(pkg.replace("-", "_"))
    except ImportError:
        install(pkg)

# ---- Import Libraries ----
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, OrdinalEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# ---- Load Data ----
train = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")
print(f"Data Loaded | Train: {train.shape}, Test: {test.shape}")

# ---- Target & Cleaning ----
target_col = "Credit_Score"
drop_cols = ["ID", "Customer_ID", "Name", "SSN"]

train = train.drop(columns=[c for c in drop_cols if c in train.columns], errors="ignore")
test = test.drop(columns=[c for c in drop_cols if c in test.columns], errors="ignore")

X = train.drop(columns=[target_col])
y = train[target_col]

# ---- Handle Missing / Mixed Data ----
X = X.replace({np.nan: "Missing"})
for col in X.columns:
    if X[col].dtype == object:
        X[col] = X[col].astype(str)

# ---- Encode Target ----
le = LabelEncoder()
y = le.fit_transform(y)

# ---- Feature Types ----
numeric_feats = X.select_dtypes(include=[np.number]).columns.tolist()
cat_feats = X.select_dtypes(exclude=[np.number]).columns.tolist()
print(f"Numeric features: {len(numeric_feats)} | Categorical features: {len(cat_feats)}")

# ---- Preprocessing Pipelines ----
numeric_transformer = Pipeline(steps=[
    ("imputer", SimpleImputer(strategy="median")),
    ("scaler", StandardScaler())
])

categorical_transformer = Pipeline(steps=[
    ("imputer", SimpleImputer(strategy="most_frequent")),
    ("encoder", OrdinalEncoder(handle_unknown="use_encoded_value", unknown_value=-1))
])

preprocessor = ColumnTransformer(transformers=[
    ("num", numeric_transformer, numeric_feats),
    ("cat", categorical_transformer, cat_feats)
])

# ---- Model ----
model = Pipeline(steps=[
    ("preprocessor", preprocessor),
    ("classifier", RandomForestClassifier(n_estimators=100, random_state=42))
])

# ---- Train / Validate ----
X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.15, random_state=42, stratify=y
)

# Convert val categorical columns to string (safety)
for col in cat_feats:
    X_train[col] = X_train[col].astype(str)
    X_val[col] = X_val[col].astype(str)

model.fit(X_train, y_train)
val_preds = model.predict(X_val)

# ---- Evaluate ----
print("\nValidation Accuracy:", round(accuracy_score(y_val, val_preds), 4))
print("\nClassification Report:\n", classification_report(y_val, val_preds, target_names=le.classes_))

# ---- Final Training on Full Data ----
model.fit(X, y)

# ---- Predict on Test ----
X_test = test.copy()
if target_col in X_test.columns:
    X_test = X_test.drop(columns=[target_col])
for col in X_test.select_dtypes(exclude=[np.number]).columns:
    X_test[col] = X_test[col].astype(str)
preds = model.predict(X_test)
preds_labels = le.inverse_transform(preds)

# ---- Save Submission ----
if "Customer_ID" in test.columns:
    submission = pd.DataFrame({
        "Customer_ID": test["Customer_ID"],
        "Credit_Score": preds_labels
    })
else:
    submission = pd.DataFrame({"Credit_Score": preds_labels})

submission.to_csv("submission.csv", index=False)
print("\nSubmission file 'submission.csv' saved successfully.")
print(submission.head())
